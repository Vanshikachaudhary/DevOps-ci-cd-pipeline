pipeline {
    agent any

    environment {
        DOCKERHUB_USER = "vanshikaaachaudhary"
        IMAGE_NAME     = "node-js-app"
        SSH_USER       = "ec2-user"   // or ubuntu depending on AMI
        EC2_HOST       = "YOUR.EC2.PUBLIC.IP" // replace with Terraform output
    }

    stages {
        stage('Checkout') {
            steps {
                git branch: 'dev',
                    url: 'https://github.com/Vanshikachaudhary/DevOps-ci-cd-pipeline.git'
            }
        }

        stage('Build & Test') {
            steps {
                sh '''
                    echo "Installing dependencies..."
                    npm install
                    echo "Running tests..."
                    npm test || echo "No tests found, skipping..."
                '''
            }
        }

        stage('Dockerize') {
            steps {
                sh '''
                    echo "Building Docker image..."
                    docker build -t $DOCKERHUB_USER/$IMAGE_NAME:latest .
                '''
            }
        }

        stage('Push to DockerHub') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'dockerhub-creds', usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
                    sh '''
                        echo "Logging in to DockerHub..."
                        echo $DOCKER_PASS | docker login -u $DOCKER_USER --password-stdin
                        
                        echo "Pushing image..."
                        docker push $DOCKERHUB_USER/$IMAGE_NAME:latest
                    '''
                }
            }
        }

        stage('Deploy to EC2') {
            steps {
                sshagent(['ec2-ssh-key']) {
                    sh '''
                        echo "Deploying on EC2..."
                        ssh -o StrictHostKeyChecking=no $SSH_USER@$EC2_HOST "
                            docker pull $DOCKERHUB_USER/$IMAGE_NAME:latest &&
                            docker stop devops-app || true &&
                            docker rm devops-app || true &&
                            docker run -d --name devops-app -p 80:3000 $DOCKERHUB_USER/$IMAGE_NAME:latest
                        "
                    '''
                }
            }
        }
    }
}
